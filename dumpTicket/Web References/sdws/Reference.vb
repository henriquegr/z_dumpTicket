'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
'
Namespace sdws
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="USD_WebServiceSoap", [Namespace]:="http://www.ca.com/UnicenterServicePlus/ServiceDesk")>  _
    Partial Public Class USD_WebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AddAssetLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateLrelRelationshipsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddMemberToGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AttachChangeToRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CallServerMethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearNotificationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateActivityLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateAssetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateAssetParentChildRelationshipOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateChangeOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateIssueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DetachChangeFromRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DoSelectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DoQueryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EscalateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FreeListHandlesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAssetExtensionInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupMemberListValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetObjectTypeInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHandleForUseridOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAccessTypeForContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLrelLengthOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLrelValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetNotificationsForContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetObjectValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPendingChangeTaskListForContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPendingIssueTaskListForContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertyInfoForCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRelatedListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRelatedListValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTaskListValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetValidTaskTransitionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NotifyContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveLrelRelationshipsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RemoveMemberFromGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ServerStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TransferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateObjectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WaitForReplyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New(ByVal sURL As String)
            MyBase.New()
            If sURL.Length > 0 Then
                Me.Url = sURL
            Else
                Me.Url = Global.dumpTicket.My.MySettings.Default.dumpTicket_sdws_USD_WebService
            End If

            If (Me.IsLocalFileSystemWebService(Me.Url) = True) Then
                Me.UseDefaultCredentials = True
                Me.useDefaultCredentialsSetExplicitly = False
            Else
                Me.useDefaultCredentialsSetExplicitly = True
            End If
        End Sub

        Public Sub New()
            MyBase.New()
            Me.Url = Global.dumpTicket.My.MySettings.Default.dumpTicket_sdws_USD_WebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = True) Then
                Me.UseDefaultCredentials = True
                Me.useDefaultCredentialsSetExplicitly = False
            Else
                Me.useDefaultCredentialsSetExplicitly = True
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddAssetLogCompleted As AddAssetLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateLrelRelationshipsCompleted As CreateLrelRelationshipsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddMemberToGroupCompleted As AddMemberToGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event AttachChangeToRequestCompleted As AttachChangeToRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event CallServerMethodCompleted As CallServerMethodCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeStatusCompleted As ChangeStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearNotificationCompleted As ClearNotificationCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateActivityLogCompleted As CreateActivityLogCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateAssetCompleted As CreateAssetCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateAssetParentChildRelationshipCompleted As CreateAssetParentChildRelationshipCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateChangeOrderCompleted As CreateChangeOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateIssueCompleted As CreateIssueCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateObjectCompleted As CreateObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateRequestCompleted As CreateRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event DetachChangeFromRequestCompleted As DetachChangeFromRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event DoSelectCompleted As DoSelectCompletedEventHandler
        
        '''<remarks/>
        Public Event DoQueryCompleted As DoQueryCompletedEventHandler
        
        '''<remarks/>
        Public Event EscalateCompleted As EscalateCompletedEventHandler
        
        '''<remarks/>
        Public Event FreeListHandlesCompleted As FreeListHandlesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAssetExtensionInformationCompleted As GetAssetExtensionInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupMemberListValuesCompleted As GetGroupMemberListValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetObjectTypeInformationCompleted As GetObjectTypeInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHandleForUseridCompleted As GetHandleForUseridCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAccessTypeForContactCompleted As GetAccessTypeForContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListValuesCompleted As GetListValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLrelLengthCompleted As GetLrelLengthCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLrelValuesCompleted As GetLrelValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetNotificationsForContactCompleted As GetNotificationsForContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetObjectValuesCompleted As GetObjectValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPendingChangeTaskListForContactCompleted As GetPendingChangeTaskListForContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPendingIssueTaskListForContactCompleted As GetPendingIssueTaskListForContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertyInfoForCategoryCompleted As GetPropertyInfoForCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRelatedListCompleted As GetRelatedListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRelatedListValuesCompleted As GetRelatedListValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTaskListValuesCompleted As GetTaskListValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetValidTaskTransitionsCompleted As GetValidTaskTransitionsCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginCompleted As LoginCompletedEventHandler
        
        '''<remarks/>
        Public Event LogoutCompleted As LogoutCompletedEventHandler
        
        '''<remarks/>
        Public Event NotifyContactsCompleted As NotifyContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveLrelRelationshipsCompleted As RemoveLrelRelationshipsCompletedEventHandler
        
        '''<remarks/>
        Public Event RemoveMemberFromGroupCompleted As RemoveMemberFromGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event ServerStatusCompleted As ServerStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event TransferCompleted As TransferCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateObjectCompleted As UpdateObjectCompletedEventHandler
        
        '''<remarks/>
        Public Event WaitForReplyCompleted As WaitForReplyCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/AddAssetLog", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddAssetLog(ByVal SID As Integer, ByVal assetHandle As String, ByVal contactHandle As String, ByVal logText As String)
            Me.Invoke("AddAssetLog", New Object() {SID, assetHandle, contactHandle, logText})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAssetLogAsync(ByVal SID As Integer, ByVal assetHandle As String, ByVal contactHandle As String, ByVal logText As String)
            Me.AddAssetLogAsync(SID, assetHandle, contactHandle, logText, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAssetLogAsync(ByVal SID As Integer, ByVal assetHandle As String, ByVal contactHandle As String, ByVal logText As String, ByVal userState As Object)
            If (Me.AddAssetLogOperationCompleted Is Nothing) Then
                Me.AddAssetLogOperationCompleted = AddressOf Me.OnAddAssetLogOperationCompleted
            End If
            Me.InvokeAsync("AddAssetLog", New Object() {SID, assetHandle, contactHandle, logText}, Me.AddAssetLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddAssetLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddAssetLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddAssetLogCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CreateLrelRelationships", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub CreateLrelRelationships(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal addObjectHandles() As String)
            Me.Invoke("CreateLrelRelationships", New Object() {SID, contextObject, LrelName, addObjectHandles})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateLrelRelationshipsAsync(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal addObjectHandles() As String)
            Me.CreateLrelRelationshipsAsync(SID, contextObject, LrelName, addObjectHandles, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateLrelRelationshipsAsync(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal addObjectHandles() As String, ByVal userState As Object)
            If (Me.CreateLrelRelationshipsOperationCompleted Is Nothing) Then
                Me.CreateLrelRelationshipsOperationCompleted = AddressOf Me.OnCreateLrelRelationshipsOperationCompleted
            End If
            Me.InvokeAsync("CreateLrelRelationships", New Object() {SID, contextObject, LrelName, addObjectHandles}, Me.CreateLrelRelationshipsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateLrelRelationshipsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateLrelRelationshipsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateLrelRelationshipsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/AddMemberToGroup", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddMemberToGroup(ByVal SID As Integer, ByVal ContactHandle As String, ByVal GroupHandle As String)
            Me.Invoke("AddMemberToGroup", New Object() {SID, ContactHandle, GroupHandle})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMemberToGroupAsync(ByVal SID As Integer, ByVal ContactHandle As String, ByVal GroupHandle As String)
            Me.AddMemberToGroupAsync(SID, ContactHandle, GroupHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddMemberToGroupAsync(ByVal SID As Integer, ByVal ContactHandle As String, ByVal GroupHandle As String, ByVal userState As Object)
            If (Me.AddMemberToGroupOperationCompleted Is Nothing) Then
                Me.AddMemberToGroupOperationCompleted = AddressOf Me.OnAddMemberToGroupOperationCompleted
            End If
            Me.InvokeAsync("AddMemberToGroup", New Object() {SID, ContactHandle, GroupHandle}, Me.AddMemberToGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddMemberToGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddMemberToGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddMemberToGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/AttachChangeToRequest", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AttachChangeToRequest(ByVal SID As Integer, ByVal creator As String, ByVal requestHandle As String, ByVal changeHandle As String, ByVal changeAttrVals() As String, ByVal description As String) As String
            Dim results() As Object = Me.Invoke("AttachChangeToRequest", New Object() {SID, creator, requestHandle, changeHandle, changeAttrVals, description})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AttachChangeToRequestAsync(ByVal SID As Integer, ByVal creator As String, ByVal requestHandle As String, ByVal changeHandle As String, ByVal changeAttrVals() As String, ByVal description As String)
            Me.AttachChangeToRequestAsync(SID, creator, requestHandle, changeHandle, changeAttrVals, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AttachChangeToRequestAsync(ByVal SID As Integer, ByVal creator As String, ByVal requestHandle As String, ByVal changeHandle As String, ByVal changeAttrVals() As String, ByVal description As String, ByVal userState As Object)
            If (Me.AttachChangeToRequestOperationCompleted Is Nothing) Then
                Me.AttachChangeToRequestOperationCompleted = AddressOf Me.OnAttachChangeToRequestOperationCompleted
            End If
            Me.InvokeAsync("AttachChangeToRequest", New Object() {SID, creator, requestHandle, changeHandle, changeAttrVals, description}, Me.AttachChangeToRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnAttachChangeToRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.AttachChangeToRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AttachChangeToRequestCompleted(Me, New AttachChangeToRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CallServerMethod", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CallServerMethod(ByVal SID As Integer, ByVal methodName As String, ByVal factoryName As String, ByVal formatList As String, ByVal parameters() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CallServerMethod", New Object() {SID, methodName, factoryName, formatList, parameters})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CallServerMethodAsync(ByVal SID As Integer, ByVal methodName As String, ByVal factoryName As String, ByVal formatList As String, ByVal parameters() As String)
            Me.CallServerMethodAsync(SID, methodName, factoryName, formatList, parameters, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CallServerMethodAsync(ByVal SID As Integer, ByVal methodName As String, ByVal factoryName As String, ByVal formatList As String, ByVal parameters() As String, ByVal userState As Object)
            If (Me.CallServerMethodOperationCompleted Is Nothing) Then
                Me.CallServerMethodOperationCompleted = AddressOf Me.OnCallServerMethodOperationCompleted
            End If
            Me.InvokeAsync("CallServerMethod", New Object() {SID, methodName, factoryName, formatList, parameters}, Me.CallServerMethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnCallServerMethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.CallServerMethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CallServerMethodCompleted(Me, New CallServerMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/ChangeStatus", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeStatus(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal newStatusHandle As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ChangeStatus", New Object() {SID, creator, objectHandle, description, newStatusHandle})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeStatusAsync(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal newStatusHandle As String)
            Me.ChangeStatusAsync(SID, creator, objectHandle, description, newStatusHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeStatusAsync(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal newStatusHandle As String, ByVal userState As Object)
            If (Me.ChangeStatusOperationCompleted Is Nothing) Then
                Me.ChangeStatusOperationCompleted = AddressOf Me.OnChangeStatusOperationCompleted
            End If
            Me.InvokeAsync("ChangeStatus", New Object() {SID, creator, objectHandle, description, newStatusHandle}, Me.ChangeStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeStatusCompleted(Me, New ChangeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/ClearNotification", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearNotification(ByVal SID As Integer, ByVal lrObject As String, ByVal clearBy As String) As Integer
            Dim results() As Object = Me.Invoke("ClearNotification", New Object() {SID, lrObject, clearBy})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearNotificationAsync(ByVal SID As Integer, ByVal lrObject As String, ByVal clearBy As String)
            Me.ClearNotificationAsync(SID, lrObject, clearBy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearNotificationAsync(ByVal SID As Integer, ByVal lrObject As String, ByVal clearBy As String, ByVal userState As Object)
            If (Me.ClearNotificationOperationCompleted Is Nothing) Then
                Me.ClearNotificationOperationCompleted = AddressOf Me.OnClearNotificationOperationCompleted
            End If
            Me.InvokeAsync("ClearNotification", New Object() {SID, lrObject, clearBy}, Me.ClearNotificationOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearNotificationOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearNotificationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearNotificationCompleted(Me, New ClearNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CreateActivityLog", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateActivityLog(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal LogType As String, ByVal TimeSpent As Integer, ByVal Internal As Boolean) As String
            Dim results() As Object = Me.Invoke("CreateActivityLog", New Object() {SID, creator, objectHandle, description, LogType, TimeSpent, Internal})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateActivityLogAsync(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal LogType As String, ByVal TimeSpent As Integer, ByVal Internal As Boolean)
            Me.CreateActivityLogAsync(SID, creator, objectHandle, description, LogType, TimeSpent, Internal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateActivityLogAsync(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal LogType As String, ByVal TimeSpent As Integer, ByVal Internal As Boolean, ByVal userState As Object)
            If (Me.CreateActivityLogOperationCompleted Is Nothing) Then
                Me.CreateActivityLogOperationCompleted = AddressOf Me.OnCreateActivityLogOperationCompleted
            End If
            Me.InvokeAsync("CreateActivityLog", New Object() {SID, creator, objectHandle, description, LogType, TimeSpent, Internal}, Me.CreateActivityLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateActivityLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateActivityLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateActivityLogCompleted(Me, New CreateActivityLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CreateAsset", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateAsset(ByVal SID As Integer, ByVal attrVals() As String, ByVal attributes() As String, ByRef NewAssetHandle As String, ByRef NewExtensionHandle As String, ByRef NewExtensionName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateAsset", New Object() {SID, attrVals, attributes})
            NewAssetHandle = CType(results(1),String)
            NewExtensionHandle = CType(results(2),String)
            NewExtensionName = CType(results(3),String)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAssetAsync(ByVal SID As Integer, ByVal attrVals() As String, ByVal attributes() As String)
            Me.CreateAssetAsync(SID, attrVals, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAssetAsync(ByVal SID As Integer, ByVal attrVals() As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.CreateAssetOperationCompleted Is Nothing) Then
                Me.CreateAssetOperationCompleted = AddressOf Me.OnCreateAssetOperationCompleted
            End If
            Me.InvokeAsync("CreateAsset", New Object() {SID, attrVals, attributes}, Me.CreateAssetOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateAssetOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateAssetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateAssetCompleted(Me, New CreateAssetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CreateAssetParentChildRelation"& _ 
            "ship", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateAssetParentChildRelationship(ByVal SID As Integer, ByVal parentHandle As String, ByVal childHandle As String) As String
            Dim results() As Object = Me.Invoke("CreateAssetParentChildRelationship", New Object() {SID, parentHandle, childHandle})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAssetParentChildRelationshipAsync(ByVal SID As Integer, ByVal parentHandle As String, ByVal childHandle As String)
            Me.CreateAssetParentChildRelationshipAsync(SID, parentHandle, childHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAssetParentChildRelationshipAsync(ByVal SID As Integer, ByVal parentHandle As String, ByVal childHandle As String, ByVal userState As Object)
            If (Me.CreateAssetParentChildRelationshipOperationCompleted Is Nothing) Then
                Me.CreateAssetParentChildRelationshipOperationCompleted = AddressOf Me.OnCreateAssetParentChildRelationshipOperationCompleted
            End If
            Me.InvokeAsync("CreateAssetParentChildRelationship", New Object() {SID, parentHandle, childHandle}, Me.CreateAssetParentChildRelationshipOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateAssetParentChildRelationshipOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateAssetParentChildRelationshipCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateAssetParentChildRelationshipCompleted(Me, New CreateAssetParentChildRelationshipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CreateChangeOrder", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateChangeOrder(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String, ByRef newChangeHandle As String, ByRef newChangeNumber As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateChangeOrder", New Object() {SID, creatorHandle, attrVals, propertyValues, template, attributes})
            newChangeHandle = CType(results(1),String)
            newChangeNumber = CType(results(2),String)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateChangeOrderAsync(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String)
            Me.CreateChangeOrderAsync(SID, creatorHandle, attrVals, propertyValues, template, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateChangeOrderAsync(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.CreateChangeOrderOperationCompleted Is Nothing) Then
                Me.CreateChangeOrderOperationCompleted = AddressOf Me.OnCreateChangeOrderOperationCompleted
            End If
            Me.InvokeAsync("CreateChangeOrder", New Object() {SID, creatorHandle, attrVals, propertyValues, template, attributes}, Me.CreateChangeOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateChangeOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateChangeOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateChangeOrderCompleted(Me, New CreateChangeOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CreateIssue", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateIssue(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String, ByRef newIssueHandle As String, ByRef newIssueNumber As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateIssue", New Object() {SID, creatorHandle, attrVals, propertyValues, template, attributes})
            newIssueHandle = CType(results(1),String)
            newIssueNumber = CType(results(2),String)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateIssueAsync(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String)
            Me.CreateIssueAsync(SID, creatorHandle, attrVals, propertyValues, template, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateIssueAsync(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.CreateIssueOperationCompleted Is Nothing) Then
                Me.CreateIssueOperationCompleted = AddressOf Me.OnCreateIssueOperationCompleted
            End If
            Me.InvokeAsync("CreateIssue", New Object() {SID, creatorHandle, attrVals, propertyValues, template, attributes}, Me.CreateIssueOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateIssueOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateIssueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateIssueCompleted(Me, New CreateIssueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CreateObject", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateObject(ByVal SID As Integer, ByVal ObjectType As String, ByVal attrVals() As String, ByVal attributes() As String, ByRef newHandle As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateObject", New Object() {SID, ObjectType, attrVals, attributes})
            newHandle = CType(results(1),String)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateObjectAsync(ByVal SID As Integer, ByVal ObjectType As String, ByVal attrVals() As String, ByVal attributes() As String)
            Me.CreateObjectAsync(SID, ObjectType, attrVals, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateObjectAsync(ByVal SID As Integer, ByVal ObjectType As String, ByVal attrVals() As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.CreateObjectOperationCompleted Is Nothing) Then
                Me.CreateObjectOperationCompleted = AddressOf Me.OnCreateObjectOperationCompleted
            End If
            Me.InvokeAsync("CreateObject", New Object() {SID, ObjectType, attrVals, attributes}, Me.CreateObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateObjectCompleted(Me, New CreateObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/CreateRequest", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateRequest(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String, ByRef newRequestHandle As String, ByRef newRequestNumber As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("CreateRequest", New Object() {SID, creatorHandle, attrVals, propertyValues, template, attributes})
            newRequestHandle = CType(results(1),String)
            newRequestNumber = CType(results(2),String)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateRequestAsync(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String)
            Me.CreateRequestAsync(SID, creatorHandle, attrVals, propertyValues, template, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateRequestAsync(ByVal SID As Integer, ByVal creatorHandle As String, ByVal attrVals() As String, ByVal propertyValues() As String, ByVal template As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.CreateRequestOperationCompleted Is Nothing) Then
                Me.CreateRequestOperationCompleted = AddressOf Me.OnCreateRequestOperationCompleted
            End If
            Me.InvokeAsync("CreateRequest", New Object() {SID, creatorHandle, attrVals, propertyValues, template, attributes}, Me.CreateRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateRequestCompleted(Me, New CreateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/DetachChangeFromRequest", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DetachChangeFromRequest(ByVal SID As Integer, ByVal creator As String, ByVal requestHandle As String, ByVal description As String) As String
            Dim results() As Object = Me.Invoke("DetachChangeFromRequest", New Object() {SID, creator, requestHandle, description})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DetachChangeFromRequestAsync(ByVal SID As Integer, ByVal creator As String, ByVal requestHandle As String, ByVal description As String)
            Me.DetachChangeFromRequestAsync(SID, creator, requestHandle, description, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DetachChangeFromRequestAsync(ByVal SID As Integer, ByVal creator As String, ByVal requestHandle As String, ByVal description As String, ByVal userState As Object)
            If (Me.DetachChangeFromRequestOperationCompleted Is Nothing) Then
                Me.DetachChangeFromRequestOperationCompleted = AddressOf Me.OnDetachChangeFromRequestOperationCompleted
            End If
            Me.InvokeAsync("DetachChangeFromRequest", New Object() {SID, creator, requestHandle, description}, Me.DetachChangeFromRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnDetachChangeFromRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.DetachChangeFromRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DetachChangeFromRequestCompleted(Me, New DetachChangeFromRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/DoSelect", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoSelect(ByVal SID As Integer, ByVal objectType As String, ByVal whereClause As String, ByVal maxRows As Integer, ByVal attributes() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DoSelect", New Object() {SID, objectType, whereClause, maxRows, attributes})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoSelectAsync(ByVal SID As Integer, ByVal objectType As String, ByVal whereClause As String, ByVal maxRows As Integer, ByVal attributes() As String)
            Me.DoSelectAsync(SID, objectType, whereClause, maxRows, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoSelectAsync(ByVal SID As Integer, ByVal objectType As String, ByVal whereClause As String, ByVal maxRows As Integer, ByVal attributes() As String, ByVal userState As Object)
            If (Me.DoSelectOperationCompleted Is Nothing) Then
                Me.DoSelectOperationCompleted = AddressOf Me.OnDoSelectOperationCompleted
            End If
            Me.InvokeAsync("DoSelect", New Object() {SID, objectType, whereClause, maxRows, attributes}, Me.DoSelectOperationCompleted, userState)
        End Sub
        
        Private Sub OnDoSelectOperationCompleted(ByVal arg As Object)
            If (Not (Me.DoSelectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoSelectCompleted(Me, New DoSelectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/DoQuery", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DoQuery(ByVal SID As Integer, ByVal ObjectType As String, ByVal WhereClause As String) As ListReturn
            Dim results() As Object = Me.Invoke("DoQuery", New Object() {SID, ObjectType, WhereClause})
            Return CType(results(0),ListReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DoQueryAsync(ByVal SID As Integer, ByVal ObjectType As String, ByVal WhereClause As String)
            Me.DoQueryAsync(SID, ObjectType, WhereClause, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DoQueryAsync(ByVal SID As Integer, ByVal ObjectType As String, ByVal WhereClause As String, ByVal userState As Object)
            If (Me.DoQueryOperationCompleted Is Nothing) Then
                Me.DoQueryOperationCompleted = AddressOf Me.OnDoQueryOperationCompleted
            End If
            Me.InvokeAsync("DoQuery", New Object() {SID, ObjectType, WhereClause}, Me.DoQueryOperationCompleted, userState)
        End Sub
        
        Private Sub OnDoQueryOperationCompleted(ByVal arg As Object)
            If (Not (Me.DoQueryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DoQueryCompleted(Me, New DoQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/Escalate", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Escalate(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal setAssignee As Boolean, ByVal newAssigneeHandle As String, ByVal setGroup As Boolean, ByVal newGroupHandle As String, ByVal setOrganization As Boolean, ByVal newOrganizationHandle As String, ByVal setPriority As Boolean, ByVal newPriorityHandle As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("Escalate", New Object() {SID, creator, objectHandle, description, setAssignee, newAssigneeHandle, setGroup, newGroupHandle, setOrganization, newOrganizationHandle, setPriority, newPriorityHandle})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EscalateAsync(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal setAssignee As Boolean, ByVal newAssigneeHandle As String, ByVal setGroup As Boolean, ByVal newGroupHandle As String, ByVal setOrganization As Boolean, ByVal newOrganizationHandle As String, ByVal setPriority As Boolean, ByVal newPriorityHandle As String)
            Me.EscalateAsync(SID, creator, objectHandle, description, setAssignee, newAssigneeHandle, setGroup, newGroupHandle, setOrganization, newOrganizationHandle, setPriority, newPriorityHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EscalateAsync(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal setAssignee As Boolean, ByVal newAssigneeHandle As String, ByVal setGroup As Boolean, ByVal newGroupHandle As String, ByVal setOrganization As Boolean, ByVal newOrganizationHandle As String, ByVal setPriority As Boolean, ByVal newPriorityHandle As String, ByVal userState As Object)
            If (Me.EscalateOperationCompleted Is Nothing) Then
                Me.EscalateOperationCompleted = AddressOf Me.OnEscalateOperationCompleted
            End If
            Me.InvokeAsync("Escalate", New Object() {SID, creator, objectHandle, description, setAssignee, newAssigneeHandle, setGroup, newGroupHandle, setOrganization, newOrganizationHandle, setPriority, newPriorityHandle}, Me.EscalateOperationCompleted, userState)
        End Sub
        
        Private Sub OnEscalateOperationCompleted(ByVal arg As Object)
            If (Not (Me.EscalateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EscalateCompleted(Me, New EscalateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/FreeListHandles", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub FreeListHandles(ByVal SID As Integer, ByVal [Handles]() As Integer)
            Me.Invoke("FreeListHandles", New Object() {SID, [Handles]})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FreeListHandlesAsync(ByVal SID As Integer, ByVal [Handles]() As Integer)
            Me.FreeListHandlesAsync(SID, [Handles], Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FreeListHandlesAsync(ByVal SID As Integer, ByVal [Handles]() As Integer, ByVal userState As Object)
            If (Me.FreeListHandlesOperationCompleted Is Nothing) Then
                Me.FreeListHandlesOperationCompleted = AddressOf Me.OnFreeListHandlesOperationCompleted
            End If
            Me.InvokeAsync("FreeListHandles", New Object() {SID, [Handles]}, Me.FreeListHandlesOperationCompleted, userState)
        End Sub
        
        Private Sub OnFreeListHandlesOperationCompleted(ByVal arg As Object)
            If (Not (Me.FreeListHandlesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FreeListHandlesCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetAssetExtensionInformation", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAssetExtensionInformation(ByVal SID As Integer, ByVal assetHandle As String, ByVal attributes() As String, ByRef ExtensionHandle As String, ByRef ExtensionName As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetAssetExtensionInformation", New Object() {SID, assetHandle, attributes})
            ExtensionHandle = CType(results(1),String)
            ExtensionName = CType(results(2),String)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAssetExtensionInformationAsync(ByVal SID As Integer, ByVal assetHandle As String, ByVal attributes() As String)
            Me.GetAssetExtensionInformationAsync(SID, assetHandle, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAssetExtensionInformationAsync(ByVal SID As Integer, ByVal assetHandle As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.GetAssetExtensionInformationOperationCompleted Is Nothing) Then
                Me.GetAssetExtensionInformationOperationCompleted = AddressOf Me.OnGetAssetExtensionInformationOperationCompleted
            End If
            Me.InvokeAsync("GetAssetExtensionInformation", New Object() {SID, assetHandle, attributes}, Me.GetAssetExtensionInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAssetExtensionInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAssetExtensionInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAssetExtensionInformationCompleted(Me, New GetAssetExtensionInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetGroupMemberListValues", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupMemberListValues(ByVal SID As Integer, ByVal whereClause As String, ByVal numToFetch As Integer, ByVal attributes() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGroupMemberListValues", New Object() {SID, whereClause, numToFetch, attributes})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupMemberListValuesAsync(ByVal SID As Integer, ByVal whereClause As String, ByVal numToFetch As Integer, ByVal attributes() As String)
            Me.GetGroupMemberListValuesAsync(SID, whereClause, numToFetch, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupMemberListValuesAsync(ByVal SID As Integer, ByVal whereClause As String, ByVal numToFetch As Integer, ByVal attributes() As String, ByVal userState As Object)
            If (Me.GetGroupMemberListValuesOperationCompleted Is Nothing) Then
                Me.GetGroupMemberListValuesOperationCompleted = AddressOf Me.OnGetGroupMemberListValuesOperationCompleted
            End If
            Me.InvokeAsync("GetGroupMemberListValues", New Object() {SID, whereClause, numToFetch, attributes}, Me.GetGroupMemberListValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupMemberListValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupMemberListValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupMemberListValuesCompleted(Me, New GetGroupMemberListValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetObjectTypeInformation", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetObjectTypeInformation(ByVal SID As Integer, ByVal factory As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetObjectTypeInformation", New Object() {SID, factory})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetObjectTypeInformationAsync(ByVal SID As Integer, ByVal factory As String)
            Me.GetObjectTypeInformationAsync(SID, factory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetObjectTypeInformationAsync(ByVal SID As Integer, ByVal factory As String, ByVal userState As Object)
            If (Me.GetObjectTypeInformationOperationCompleted Is Nothing) Then
                Me.GetObjectTypeInformationOperationCompleted = AddressOf Me.OnGetObjectTypeInformationOperationCompleted
            End If
            Me.InvokeAsync("GetObjectTypeInformation", New Object() {SID, factory}, Me.GetObjectTypeInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetObjectTypeInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetObjectTypeInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetObjectTypeInformationCompleted(Me, New GetObjectTypeInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetHandleForUserid", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHandleForUserid(ByVal SID As Integer, ByVal userID As String) As String
            Dim results() As Object = Me.Invoke("GetHandleForUserid", New Object() {SID, userID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHandleForUseridAsync(ByVal SID As Integer, ByVal userID As String)
            Me.GetHandleForUseridAsync(SID, userID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHandleForUseridAsync(ByVal SID As Integer, ByVal userID As String, ByVal userState As Object)
            If (Me.GetHandleForUseridOperationCompleted Is Nothing) Then
                Me.GetHandleForUseridOperationCompleted = AddressOf Me.OnGetHandleForUseridOperationCompleted
            End If
            Me.InvokeAsync("GetHandleForUserid", New Object() {SID, userID}, Me.GetHandleForUseridOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHandleForUseridOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHandleForUseridCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHandleForUseridCompleted(Me, New GetHandleForUseridCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetAccessTypeForContact", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAccessTypeForContact(ByVal SID As Integer, ByVal ContactHandle As String) As String
            Dim results() As Object = Me.Invoke("GetAccessTypeForContact", New Object() {SID, ContactHandle})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAccessTypeForContactAsync(ByVal SID As Integer, ByVal ContactHandle As String)
            Me.GetAccessTypeForContactAsync(SID, ContactHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAccessTypeForContactAsync(ByVal SID As Integer, ByVal ContactHandle As String, ByVal userState As Object)
            If (Me.GetAccessTypeForContactOperationCompleted Is Nothing) Then
                Me.GetAccessTypeForContactOperationCompleted = AddressOf Me.OnGetAccessTypeForContactOperationCompleted
            End If
            Me.InvokeAsync("GetAccessTypeForContact", New Object() {SID, ContactHandle}, Me.GetAccessTypeForContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAccessTypeForContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAccessTypeForContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAccessTypeForContactCompleted(Me, New GetAccessTypeForContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetListValues", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListValues(ByVal SID As Integer, ByVal ListHandle As Integer, ByVal StartIndex As Integer, ByVal EndIndex As Integer, ByVal AttributeNames() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetListValues", New Object() {SID, ListHandle, StartIndex, EndIndex, AttributeNames})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListValuesAsync(ByVal SID As Integer, ByVal ListHandle As Integer, ByVal StartIndex As Integer, ByVal EndIndex As Integer, ByVal AttributeNames() As String)
            Me.GetListValuesAsync(SID, ListHandle, StartIndex, EndIndex, AttributeNames, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListValuesAsync(ByVal SID As Integer, ByVal ListHandle As Integer, ByVal StartIndex As Integer, ByVal EndIndex As Integer, ByVal AttributeNames() As String, ByVal userState As Object)
            If (Me.GetListValuesOperationCompleted Is Nothing) Then
                Me.GetListValuesOperationCompleted = AddressOf Me.OnGetListValuesOperationCompleted
            End If
            Me.InvokeAsync("GetListValues", New Object() {SID, ListHandle, StartIndex, EndIndex, AttributeNames}, Me.GetListValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListValuesCompleted(Me, New GetListValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetLrelLength", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLrelLength(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String) As Integer
            Dim results() As Object = Me.Invoke("GetLrelLength", New Object() {SID, contextObject, LrelName})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLrelLengthAsync(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String)
            Me.GetLrelLengthAsync(SID, contextObject, LrelName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLrelLengthAsync(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal userState As Object)
            If (Me.GetLrelLengthOperationCompleted Is Nothing) Then
                Me.GetLrelLengthOperationCompleted = AddressOf Me.OnGetLrelLengthOperationCompleted
            End If
            Me.InvokeAsync("GetLrelLength", New Object() {SID, contextObject, LrelName}, Me.GetLrelLengthOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLrelLengthOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLrelLengthCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLrelLengthCompleted(Me, New GetLrelLengthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetLrelValues", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLrelValues(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal startIndex As Integer, ByVal endIndex As Integer, ByVal attributes() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetLrelValues", New Object() {SID, contextObject, LrelName, startIndex, endIndex, attributes})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLrelValuesAsync(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal startIndex As Integer, ByVal endIndex As Integer, ByVal attributes() As String)
            Me.GetLrelValuesAsync(SID, contextObject, LrelName, startIndex, endIndex, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLrelValuesAsync(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal startIndex As Integer, ByVal endIndex As Integer, ByVal attributes() As String, ByVal userState As Object)
            If (Me.GetLrelValuesOperationCompleted Is Nothing) Then
                Me.GetLrelValuesOperationCompleted = AddressOf Me.OnGetLrelValuesOperationCompleted
            End If
            Me.InvokeAsync("GetLrelValues", New Object() {SID, contextObject, LrelName, startIndex, endIndex, attributes}, Me.GetLrelValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLrelValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLrelValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLrelValuesCompleted(Me, New GetLrelValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetNotificationsForContact", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNotificationsForContact(ByVal SID As Integer, ByVal contactHandle As String, ByVal queryStatus As Integer) As ListReturn
            Dim results() As Object = Me.Invoke("GetNotificationsForContact", New Object() {SID, contactHandle, queryStatus})
            Return CType(results(0),ListReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetNotificationsForContactAsync(ByVal SID As Integer, ByVal contactHandle As String, ByVal queryStatus As Integer)
            Me.GetNotificationsForContactAsync(SID, contactHandle, queryStatus, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetNotificationsForContactAsync(ByVal SID As Integer, ByVal contactHandle As String, ByVal queryStatus As Integer, ByVal userState As Object)
            If (Me.GetNotificationsForContactOperationCompleted Is Nothing) Then
                Me.GetNotificationsForContactOperationCompleted = AddressOf Me.OnGetNotificationsForContactOperationCompleted
            End If
            Me.InvokeAsync("GetNotificationsForContact", New Object() {SID, contactHandle, queryStatus}, Me.GetNotificationsForContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetNotificationsForContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetNotificationsForContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetNotificationsForContactCompleted(Me, New GetNotificationsForContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetObjectValues", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetObjectValues(ByVal SID As Integer, ByVal objectHandle As String, ByVal attributes() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetObjectValues", New Object() {SID, objectHandle, attributes})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetObjectValuesAsync(ByVal SID As Integer, ByVal objectHandle As String, ByVal attributes() As String)
            Me.GetObjectValuesAsync(SID, objectHandle, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetObjectValuesAsync(ByVal SID As Integer, ByVal objectHandle As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.GetObjectValuesOperationCompleted Is Nothing) Then
                Me.GetObjectValuesOperationCompleted = AddressOf Me.OnGetObjectValuesOperationCompleted
            End If
            Me.InvokeAsync("GetObjectValues", New Object() {SID, objectHandle, attributes}, Me.GetObjectValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetObjectValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetObjectValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetObjectValuesCompleted(Me, New GetObjectValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetPendingChangeTaskListForCon"& _ 
            "tact", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPendingChangeTaskListForContact(ByVal SID As Integer, ByVal contactHandle As String) As ListReturn
            Dim results() As Object = Me.Invoke("GetPendingChangeTaskListForContact", New Object() {SID, contactHandle})
            Return CType(results(0),ListReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPendingChangeTaskListForContactAsync(ByVal SID As Integer, ByVal contactHandle As String)
            Me.GetPendingChangeTaskListForContactAsync(SID, contactHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPendingChangeTaskListForContactAsync(ByVal SID As Integer, ByVal contactHandle As String, ByVal userState As Object)
            If (Me.GetPendingChangeTaskListForContactOperationCompleted Is Nothing) Then
                Me.GetPendingChangeTaskListForContactOperationCompleted = AddressOf Me.OnGetPendingChangeTaskListForContactOperationCompleted
            End If
            Me.InvokeAsync("GetPendingChangeTaskListForContact", New Object() {SID, contactHandle}, Me.GetPendingChangeTaskListForContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPendingChangeTaskListForContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPendingChangeTaskListForContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPendingChangeTaskListForContactCompleted(Me, New GetPendingChangeTaskListForContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetPendingIssueTaskListForCont"& _ 
            "act", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPendingIssueTaskListForContact(ByVal SID As Integer, ByVal contactHandle As String) As ListReturn
            Dim results() As Object = Me.Invoke("GetPendingIssueTaskListForContact", New Object() {SID, contactHandle})
            Return CType(results(0),ListReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPendingIssueTaskListForContactAsync(ByVal SID As Integer, ByVal contactHandle As String)
            Me.GetPendingIssueTaskListForContactAsync(SID, contactHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPendingIssueTaskListForContactAsync(ByVal SID As Integer, ByVal contactHandle As String, ByVal userState As Object)
            If (Me.GetPendingIssueTaskListForContactOperationCompleted Is Nothing) Then
                Me.GetPendingIssueTaskListForContactOperationCompleted = AddressOf Me.OnGetPendingIssueTaskListForContactOperationCompleted
            End If
            Me.InvokeAsync("GetPendingIssueTaskListForContact", New Object() {SID, contactHandle}, Me.GetPendingIssueTaskListForContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPendingIssueTaskListForContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPendingIssueTaskListForContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPendingIssueTaskListForContactCompleted(Me, New GetPendingIssueTaskListForContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetPropertyInfoForCategory", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertyInfoForCategory(ByVal SID As Integer, ByVal categoryHandle As String, ByVal attributes() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetPropertyInfoForCategory", New Object() {SID, categoryHandle, attributes})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertyInfoForCategoryAsync(ByVal SID As Integer, ByVal categoryHandle As String, ByVal attributes() As String)
            Me.GetPropertyInfoForCategoryAsync(SID, categoryHandle, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertyInfoForCategoryAsync(ByVal SID As Integer, ByVal categoryHandle As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.GetPropertyInfoForCategoryOperationCompleted Is Nothing) Then
                Me.GetPropertyInfoForCategoryOperationCompleted = AddressOf Me.OnGetPropertyInfoForCategoryOperationCompleted
            End If
            Me.InvokeAsync("GetPropertyInfoForCategory", New Object() {SID, categoryHandle, attributes}, Me.GetPropertyInfoForCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertyInfoForCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertyInfoForCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertyInfoForCategoryCompleted(Me, New GetPropertyInfoForCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetRelatedList", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRelatedList(ByVal SID As Integer, ByVal ObjectHandle As String, ByVal ListName As String) As ListReturn
            Dim results() As Object = Me.Invoke("GetRelatedList", New Object() {SID, ObjectHandle, ListName})
            Return CType(results(0),ListReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRelatedListAsync(ByVal SID As Integer, ByVal ObjectHandle As String, ByVal ListName As String)
            Me.GetRelatedListAsync(SID, ObjectHandle, ListName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRelatedListAsync(ByVal SID As Integer, ByVal ObjectHandle As String, ByVal ListName As String, ByVal userState As Object)
            If (Me.GetRelatedListOperationCompleted Is Nothing) Then
                Me.GetRelatedListOperationCompleted = AddressOf Me.OnGetRelatedListOperationCompleted
            End If
            Me.InvokeAsync("GetRelatedList", New Object() {SID, ObjectHandle, ListName}, Me.GetRelatedListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRelatedListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRelatedListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRelatedListCompleted(Me, New GetRelatedListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetRelatedListValues", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRelatedListValues(ByVal SID As Integer, ByVal objectHandle As String, ByVal listName As String, ByVal numToFetch As Integer, ByVal attributes() As String, ByRef numRowsFound As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetRelatedListValues", New Object() {SID, objectHandle, listName, numToFetch, attributes})
            numRowsFound = CType(results(1),Integer)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRelatedListValuesAsync(ByVal SID As Integer, ByVal objectHandle As String, ByVal listName As String, ByVal numToFetch As Integer, ByVal attributes() As String)
            Me.GetRelatedListValuesAsync(SID, objectHandle, listName, numToFetch, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRelatedListValuesAsync(ByVal SID As Integer, ByVal objectHandle As String, ByVal listName As String, ByVal numToFetch As Integer, ByVal attributes() As String, ByVal userState As Object)
            If (Me.GetRelatedListValuesOperationCompleted Is Nothing) Then
                Me.GetRelatedListValuesOperationCompleted = AddressOf Me.OnGetRelatedListValuesOperationCompleted
            End If
            Me.InvokeAsync("GetRelatedListValues", New Object() {SID, objectHandle, listName, numToFetch, attributes}, Me.GetRelatedListValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRelatedListValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRelatedListValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRelatedListValuesCompleted(Me, New GetRelatedListValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetTaskListValues", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTaskListValues(ByVal SID As Integer, ByVal objectHandle As String, ByVal attributes() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetTaskListValues", New Object() {SID, objectHandle, attributes})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTaskListValuesAsync(ByVal SID As Integer, ByVal objectHandle As String, ByVal attributes() As String)
            Me.GetTaskListValuesAsync(SID, objectHandle, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTaskListValuesAsync(ByVal SID As Integer, ByVal objectHandle As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.GetTaskListValuesOperationCompleted Is Nothing) Then
                Me.GetTaskListValuesOperationCompleted = AddressOf Me.OnGetTaskListValuesOperationCompleted
            End If
            Me.InvokeAsync("GetTaskListValues", New Object() {SID, objectHandle, attributes}, Me.GetTaskListValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTaskListValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTaskListValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTaskListValuesCompleted(Me, New GetTaskListValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/GetValidTaskTransitions", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetValidTaskTransitions(ByVal SID As Integer, ByVal taskHandle As String, ByVal attributes() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetValidTaskTransitions", New Object() {SID, taskHandle, attributes})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetValidTaskTransitionsAsync(ByVal SID As Integer, ByVal taskHandle As String, ByVal attributes() As String)
            Me.GetValidTaskTransitionsAsync(SID, taskHandle, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetValidTaskTransitionsAsync(ByVal SID As Integer, ByVal taskHandle As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.GetValidTaskTransitionsOperationCompleted Is Nothing) Then
                Me.GetValidTaskTransitionsOperationCompleted = AddressOf Me.OnGetValidTaskTransitionsOperationCompleted
            End If
            Me.InvokeAsync("GetValidTaskTransitions", New Object() {SID, taskHandle, attributes}, Me.GetValidTaskTransitionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetValidTaskTransitionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetValidTaskTransitionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetValidTaskTransitionsCompleted(Me, New GetValidTaskTransitionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/Login", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Login(ByVal username As String, ByVal password As String) As <System.Xml.Serialization.XmlElementAttribute("SID")> Integer
            Dim results() As Object = Me.Invoke("Login", New Object() {username, password})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal username As String, ByVal password As String)
            Me.LoginAsync(username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAsync(ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.LoginOperationCompleted Is Nothing) Then
                Me.LoginOperationCompleted = AddressOf Me.OnLoginOperationCompleted
            End If
            Me.InvokeAsync("Login", New Object() {username, password}, Me.LoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginCompleted(Me, New LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/Logout", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Logout(ByVal SID As Integer)
            Me.Invoke("Logout", New Object() {SID})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal SID As Integer)
            Me.LogoutAsync(SID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal SID As Integer, ByVal userState As Object)
            If (Me.LogoutOperationCompleted Is Nothing) Then
                Me.LogoutOperationCompleted = AddressOf Me.OnLogoutOperationCompleted
            End If
            Me.InvokeAsync("Logout", New Object() {SID}, Me.LogoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogoutCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/NotifyContacts", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NotifyContacts(ByVal SID As Integer, ByVal creator As String, ByVal contextObject As String, ByVal messageTitle As String, ByVal messageBody As String, ByVal notifyLevel As Integer, ByVal notifyees() As String, ByVal Internal As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("NotifyContacts", New Object() {SID, creator, contextObject, messageTitle, messageBody, notifyLevel, notifyees, Internal})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NotifyContactsAsync(ByVal SID As Integer, ByVal creator As String, ByVal contextObject As String, ByVal messageTitle As String, ByVal messageBody As String, ByVal notifyLevel As Integer, ByVal notifyees() As String, ByVal Internal As Boolean)
            Me.NotifyContactsAsync(SID, creator, contextObject, messageTitle, messageBody, notifyLevel, notifyees, Internal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NotifyContactsAsync(ByVal SID As Integer, ByVal creator As String, ByVal contextObject As String, ByVal messageTitle As String, ByVal messageBody As String, ByVal notifyLevel As Integer, ByVal notifyees() As String, ByVal Internal As Boolean, ByVal userState As Object)
            If (Me.NotifyContactsOperationCompleted Is Nothing) Then
                Me.NotifyContactsOperationCompleted = AddressOf Me.OnNotifyContactsOperationCompleted
            End If
            Me.InvokeAsync("NotifyContacts", New Object() {SID, creator, contextObject, messageTitle, messageBody, notifyLevel, notifyees, Internal}, Me.NotifyContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnNotifyContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.NotifyContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NotifyContactsCompleted(Me, New NotifyContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/RemoveLrelRelationships", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveLrelRelationships(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal removeObjectHandles() As String)
            Me.Invoke("RemoveLrelRelationships", New Object() {SID, contextObject, LrelName, removeObjectHandles})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveLrelRelationshipsAsync(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal removeObjectHandles() As String)
            Me.RemoveLrelRelationshipsAsync(SID, contextObject, LrelName, removeObjectHandles, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveLrelRelationshipsAsync(ByVal SID As Integer, ByVal contextObject As String, ByVal LrelName As String, ByVal removeObjectHandles() As String, ByVal userState As Object)
            If (Me.RemoveLrelRelationshipsOperationCompleted Is Nothing) Then
                Me.RemoveLrelRelationshipsOperationCompleted = AddressOf Me.OnRemoveLrelRelationshipsOperationCompleted
            End If
            Me.InvokeAsync("RemoveLrelRelationships", New Object() {SID, contextObject, LrelName, removeObjectHandles}, Me.RemoveLrelRelationshipsOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveLrelRelationshipsOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveLrelRelationshipsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveLrelRelationshipsCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/RemoveMemberFromGroup", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RemoveMemberFromGroup(ByVal SID As Integer, ByVal ContactHandle As String, ByVal GroupHandle As String)
            Me.Invoke("RemoveMemberFromGroup", New Object() {SID, ContactHandle, GroupHandle})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveMemberFromGroupAsync(ByVal SID As Integer, ByVal ContactHandle As String, ByVal GroupHandle As String)
            Me.RemoveMemberFromGroupAsync(SID, ContactHandle, GroupHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RemoveMemberFromGroupAsync(ByVal SID As Integer, ByVal ContactHandle As String, ByVal GroupHandle As String, ByVal userState As Object)
            If (Me.RemoveMemberFromGroupOperationCompleted Is Nothing) Then
                Me.RemoveMemberFromGroupOperationCompleted = AddressOf Me.OnRemoveMemberFromGroupOperationCompleted
            End If
            Me.InvokeAsync("RemoveMemberFromGroup", New Object() {SID, ContactHandle, GroupHandle}, Me.RemoveMemberFromGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnRemoveMemberFromGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.RemoveMemberFromGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RemoveMemberFromGroupCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/ServerStatus", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ServerStatus(ByVal SID As Integer) As <System.Xml.Serialization.XmlElementAttribute("ServerStatus")> Integer
            Dim results() As Object = Me.Invoke("ServerStatus", New Object() {SID})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ServerStatusAsync(ByVal SID As Integer)
            Me.ServerStatusAsync(SID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ServerStatusAsync(ByVal SID As Integer, ByVal userState As Object)
            If (Me.ServerStatusOperationCompleted Is Nothing) Then
                Me.ServerStatusOperationCompleted = AddressOf Me.OnServerStatusOperationCompleted
            End If
            Me.InvokeAsync("ServerStatus", New Object() {SID}, Me.ServerStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnServerStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ServerStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ServerStatusCompleted(Me, New ServerStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/Transfer", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Transfer(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal setAssignee As Boolean, ByVal newAssigneeHandle As String, ByVal setGroup As Boolean, ByVal newGroupHandle As String, ByVal setOrganization As Boolean, ByVal newOrganizationHandle As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("Transfer", New Object() {SID, creator, objectHandle, description, setAssignee, newAssigneeHandle, setGroup, newGroupHandle, setOrganization, newOrganizationHandle})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TransferAsync(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal setAssignee As Boolean, ByVal newAssigneeHandle As String, ByVal setGroup As Boolean, ByVal newGroupHandle As String, ByVal setOrganization As Boolean, ByVal newOrganizationHandle As String)
            Me.TransferAsync(SID, creator, objectHandle, description, setAssignee, newAssigneeHandle, setGroup, newGroupHandle, setOrganization, newOrganizationHandle, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TransferAsync(ByVal SID As Integer, ByVal creator As String, ByVal objectHandle As String, ByVal description As String, ByVal setAssignee As Boolean, ByVal newAssigneeHandle As String, ByVal setGroup As Boolean, ByVal newGroupHandle As String, ByVal setOrganization As Boolean, ByVal newOrganizationHandle As String, ByVal userState As Object)
            If (Me.TransferOperationCompleted Is Nothing) Then
                Me.TransferOperationCompleted = AddressOf Me.OnTransferOperationCompleted
            End If
            Me.InvokeAsync("Transfer", New Object() {SID, creator, objectHandle, description, setAssignee, newAssigneeHandle, setGroup, newGroupHandle, setOrganization, newOrganizationHandle}, Me.TransferOperationCompleted, userState)
        End Sub
        
        Private Sub OnTransferOperationCompleted(ByVal arg As Object)
            If (Not (Me.TransferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TransferCompleted(Me, New TransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/UpdateObject", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateObject(ByVal SID As Integer, ByVal objectHandle As String, ByVal attrVals() As String, ByVal attributes() As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UpdateObject", New Object() {SID, objectHandle, attrVals, attributes})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateObjectAsync(ByVal SID As Integer, ByVal objectHandle As String, ByVal attrVals() As String, ByVal attributes() As String)
            Me.UpdateObjectAsync(SID, objectHandle, attrVals, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateObjectAsync(ByVal SID As Integer, ByVal objectHandle As String, ByVal attrVals() As String, ByVal attributes() As String, ByVal userState As Object)
            If (Me.UpdateObjectOperationCompleted Is Nothing) Then
                Me.UpdateObjectOperationCompleted = AddressOf Me.OnUpdateObjectOperationCompleted
            End If
            Me.InvokeAsync("UpdateObject", New Object() {SID, objectHandle, attrVals, attributes}, Me.UpdateObjectOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateObjectOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateObjectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateObjectCompleted(Me, New UpdateObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.ca.com/UnicenterServicePlus/ServiceDesk/WaitForReply", RequestNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", ResponseNamespace:="http://www.ca.com/UnicenterServicePlus/ServiceDesk", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WaitForReply(ByVal SID As Integer, ByVal secondsToWait As Integer) As <System.Xml.Serialization.XmlElementAttribute("ReplySuccess")> String
            Dim results() As Object = Me.Invoke("WaitForReply", New Object() {SID, secondsToWait})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WaitForReplyAsync(ByVal SID As Integer, ByVal secondsToWait As Integer)
            Me.WaitForReplyAsync(SID, secondsToWait, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WaitForReplyAsync(ByVal SID As Integer, ByVal secondsToWait As Integer, ByVal userState As Object)
            If (Me.WaitForReplyOperationCompleted Is Nothing) Then
                Me.WaitForReplyOperationCompleted = AddressOf Me.OnWaitForReplyOperationCompleted
            End If
            Me.InvokeAsync("WaitForReply", New Object() {SID, secondsToWait}, Me.WaitForReplyOperationCompleted, userState)
        End Sub
        
        Private Sub OnWaitForReplyOperationCompleted(ByVal arg As Object)
            If (Not (Me.WaitForReplyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WaitForReplyCompleted(Me, New WaitForReplyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.ca.com/UnicenterServicePlus/ServiceDesk")>  _
    Partial Public Class ListReturn
        
        Private listHandleField As Integer
        
        Private listLengthField As Integer
        
        '''<remarks/>
        Public Property ListHandle() As Integer
            Get
                Return Me.listHandleField
            End Get
            Set
                Me.listHandleField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ListLength() As Integer
            Get
                Return Me.listLengthField
            End Get
            Set
                Me.listLengthField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddAssetLogCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateLrelRelationshipsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddMemberToGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AttachChangeToRequestCompletedEventHandler(ByVal sender As Object, ByVal e As AttachChangeToRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AttachChangeToRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CallServerMethodCompletedEventHandler(ByVal sender As Object, ByVal e As CallServerMethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CallServerMethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ChangeStatusCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ClearNotificationCompletedEventHandler(ByVal sender As Object, ByVal e As ClearNotificationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearNotificationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateActivityLogCompletedEventHandler(ByVal sender As Object, ByVal e As CreateActivityLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateActivityLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateAssetCompletedEventHandler(ByVal sender As Object, ByVal e As CreateAssetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateAssetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NewAssetHandle() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NewExtensionHandle() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property NewExtensionName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateAssetParentChildRelationshipCompletedEventHandler(ByVal sender As Object, ByVal e As CreateAssetParentChildRelationshipCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateAssetParentChildRelationshipCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateChangeOrderCompletedEventHandler(ByVal sender As Object, ByVal e As CreateChangeOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateChangeOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newChangeHandle() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newChangeNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateIssueCompletedEventHandler(ByVal sender As Object, ByVal e As CreateIssueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateIssueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newIssueHandle() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newIssueNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateObjectCompletedEventHandler(ByVal sender As Object, ByVal e As CreateObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newHandle() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateRequestCompletedEventHandler(ByVal sender As Object, ByVal e As CreateRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newRequestHandle() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property newRequestNumber() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DetachChangeFromRequestCompletedEventHandler(ByVal sender As Object, ByVal e As DetachChangeFromRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DetachChangeFromRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DoSelectCompletedEventHandler(ByVal sender As Object, ByVal e As DoSelectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DoSelectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DoQueryCompletedEventHandler(ByVal sender As Object, ByVal e As DoQueryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DoQueryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ListReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ListReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub EscalateCompletedEventHandler(ByVal sender As Object, ByVal e As EscalateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EscalateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub FreeListHandlesCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAssetExtensionInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetAssetExtensionInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAssetExtensionInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ExtensionHandle() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ExtensionName() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetGroupMemberListValuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupMemberListValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupMemberListValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetObjectTypeInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetObjectTypeInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetObjectTypeInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetHandleForUseridCompletedEventHandler(ByVal sender As Object, ByVal e As GetHandleForUseridCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHandleForUseridCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetAccessTypeForContactCompletedEventHandler(ByVal sender As Object, ByVal e As GetAccessTypeForContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAccessTypeForContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetListValuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetListValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetLrelLengthCompletedEventHandler(ByVal sender As Object, ByVal e As GetLrelLengthCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLrelLengthCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetLrelValuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetLrelValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLrelValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetNotificationsForContactCompletedEventHandler(ByVal sender As Object, ByVal e As GetNotificationsForContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetNotificationsForContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ListReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ListReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetObjectValuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetObjectValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetObjectValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetPendingChangeTaskListForContactCompletedEventHandler(ByVal sender As Object, ByVal e As GetPendingChangeTaskListForContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPendingChangeTaskListForContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ListReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ListReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetPendingIssueTaskListForContactCompletedEventHandler(ByVal sender As Object, ByVal e As GetPendingIssueTaskListForContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPendingIssueTaskListForContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ListReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ListReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetPropertyInfoForCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertyInfoForCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertyInfoForCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRelatedListCompletedEventHandler(ByVal sender As Object, ByVal e As GetRelatedListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRelatedListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ListReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ListReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetRelatedListValuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetRelatedListValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRelatedListValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property numRowsFound() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetTaskListValuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetTaskListValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTaskListValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetValidTaskTransitionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetValidTaskTransitionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetValidTaskTransitionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoginCompletedEventHandler(ByVal sender As Object, ByVal e As LoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LogoutCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub NotifyContactsCompletedEventHandler(ByVal sender As Object, ByVal e As NotifyContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NotifyContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveLrelRelationshipsCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RemoveMemberFromGroupCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ServerStatusCompletedEventHandler(ByVal sender As Object, ByVal e As ServerStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ServerStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub TransferCompletedEventHandler(ByVal sender As Object, ByVal e As TransferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UpdateObjectCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateObjectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateObjectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub WaitForReplyCompletedEventHandler(ByVal sender As Object, ByVal e As WaitForReplyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WaitForReplyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
